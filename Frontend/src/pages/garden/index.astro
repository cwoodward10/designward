---
import A from '@components/base/A.astro';
import PageTitle from '@components/base/PageTitle.astro';
import ContentImage from '@components/content-components/ContentImage.astro';
import Layout from '@layouts/Layout.astro';

import { getCollection } from 'astro:content';

const allThoughts = await getCollection('thoughts');
---

<Layout title="Thought garden">
	<main>
        <section class="hero">
            <hgroup>
                <h1 class="hero">
                    <PageTitle maxWidth={9}>Thought garden</PageTitle>
                    <span class="fallback">Thought garden</span>
                </h1>
                <p class="style-h4">An evolving collection of, well, thoughts. In various formats and mediums.</p>
            </hgroup>
            <p>
                Welcome to my Thought Garden. The idea here is to cultivate a Digital Garden - a concept that I discovered in
                <A href="https://maggieappleton.com/garden-history">this explainer piece</A> a little while back. The mutability and imperfection
                inherent within the "Garden" idea is really appealing as the idea is that I can post and update as I go. There isn't really enough content
                in here yet for me to implement anything <em>too</em> cool with the design but hopefully that changes as I write more.
            </p>
        </section>
        {allThoughts.length > 0 &&
            <section>
                <ul>
                    {allThoughts.map(thought => (
                        <li>
                            <div class="image">
                                <ContentImage 
                                    src={thought.data.image?.src!} 
                                    alt={thought.data.image?.alt ?? thought.data.title}
                                />
                            </div>
                            <div class="text">
                                <h3>{thought.data.title}</h3>
                                {thought.data.tagline && <p class="tag small">{thought.data.tagline}</p>}
                                <a class="arrow" href={`${thought.id}`}>Read it</a>
                            </div>
                        </li>
                    ))}
                </ul>
            </section>
        }
    </main>
</Layout> 

<style lang="scss">
    @use '@assets/styles/sass/breakpoints.scss' as media;

    main {
        display: flex;
        flex-direction: column;
        gap: 30px;
        width: 1000px;

        padding-bottom: 100px;
    }
    section {
        gap: 1em;
    }

    h1 {
        margin-bottom: 0.5rem;
        
        .fallback {
            display: none;
            content-visibility: hidden;
            line-height: 1;
        }
        
        @media screen and (max-width: 400px) {
            line-height: 1;

            :global(.page-title) {
                display: none;
                content-visibility: hidden;
            }
            .fallback {
                display: inline-block;
                content-visibility: auto;
            }
        }
    }

    .tag {
        max-width: 30em;
        text-wrap: pretty;
    }

    ul {
        display: flex;
        flex-direction: column;
        gap: 2rem;

        li {
            .image {
                display: none;
                content-visibility: hidden;
            }    
        }

        @include media.at('medium') {
            padding-left: 0;

            li {
                display: flex;
                gap: 2rem;

                .image {
                    display: block;
                    content-visibility: auto;
                    max-width: 240px;
                    overflow: hidden;
                }
                
                &::marker {
                    content: none;
                }
            }
        }
    }
</style>